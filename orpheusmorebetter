#!/usr/bin/env python3

import configparser
import argparse

import pickle

from datetime import datetime
import os
import shutil
import sys
import tempfile
import traceback
import logging
import html
from urllib.parse import urlparse, parse_qsl
from multiprocessing import cpu_count
from typing import List

from _version import __version__

from services import tagging, transcode, whatapi
from models import TorrentGroup, Torrent, Format

if sys.version_info < (3, 10, 0): # investigate 311
    raise Exception("Requires Python 3.10.0 or newer")


def banner():
    return (
        "Torrent created with orpheusmorebetter version {0}. Maintained by walkrflocka\n"
        "This transcode was generated by an automated system".format(__version__)
    )


def create_description(
    torrent: Torrent, flac_dir: str, format: Format
) -> List[str]:
    # Create an example command to document the transcode process.
    cmds = transcode.transcode_commands(
        format,
        transcode.needs_resampling(flac_dir),
        transcode.resample_rate(flac_dir),
        "input.flac", # think this is just a dummy for the desc
        "output" + format.encoder.ext, # type: ignore
    )

    description = [
        f"Transcode of [pl=noartist]{torrent.id}[/pl]",
        "",
        "Transcode process:",
        "",
        "[code]{0}[/code]".format(" | ".join(cmds)),
        "",
        banner(),
    ]
    return description


def formats_needed(group: TorrentGroup, torrent: Torrent, supported_formats: list[str]):
    if "" in supported_formats:
        supported_formats.remove("")

    def same_edition(t: Torrent):
        return t.media == torrent.media \
            and t.remasterYear == torrent.remasterYear \
            and t.remasterTitle == torrent.remasterTitle \
            and t.remasterRecordLabel == torrent.remasterRecordLabel \
            and t.remasterCatalogueNumber == torrent.remasterCatalogueNumber

    other_torrents = filter(same_edition, group.torrent)
    current_formats = set(Format(t.format, t.encoding, None, None) for t in other_torrents)

    # needed_formats will either return the perfect three, or nothing
    # thus subtracting what we already have will leave us with what we need
    # hurray for set operations!
    needed_formats = torrent.allowed_transcodes.difference(current_formats)
    return needed_formats


def main():
    if not os.path.exists("logs/"):
        os.mkdir("logs")

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter, prog="orpheusmorebetter"
    )
    parser.add_argument(
        "release_urls", nargs="*", help="the URL where the release is located"
    )
    parser.add_argument(
        "-s",
        "--single",
        action="store_true",
        help="only add one format per release (useful for getting unique groups)",
    )
    parser.add_argument(
        "-j",
        "--threads",
        type=int,
        help="number of threads to use when transcoding",
        default=max(cpu_count() - 1, 1),
    )
    parser.add_argument(
        "--config",
        help="the location of the configuration file",
        default=os.path.expanduser("~/.orpheusmorebetter/config"),
    )
    parser.add_argument(
        "--cache",
        help="the location of the cache",
        default=os.path.expanduser("~/.orpheusmorebetter/cache"),
    )
    parser.add_argument(
        "-U",
        "--no-upload",
        action="store_true",
        help="don't upload new torrents (in case you want to do it manually)",
    )
    parser.add_argument(
        "-E",
        "--no-24bit-edit",
        action="store_true",
        help="don't try to edit 24-bit torrents mistakenly labeled as 16-bit",
    )
    parser.add_argument(
        "--version", action="version", version="%(prog)s " + __version__
    )
    parser.add_argument(
        "-m",
        "--mode",
        help="mode to search for transcode candidates; snatched, uploaded, both, seeding, or all",
    )
    parser.add_argument(
        "-S",
        "--skip",
        action="store_true",
        help="treats a torrent as already processed",
    )
    parser.add_argument(
        "-t", "--totp", help="time based one time password for 2FA", default=None
    )
    parser.add_argument(
        "-o", "--source", help="the value to put in the source flag in created torrents"
    )
    parser.add_argument("-d", "--debug", action="store_true")

    args = parser.parse_args()

    if args.debug is not None and args.debug is True:
        level = logging.DEBUG
        print('Entering into debug mode')
    else:
        level = logging.INFO

    logging.basicConfig(
        level=level,
        format="%(asctime)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(f"logs/{str(datetime.now())}.txt", mode="w"),
            logging.StreamHandler(),
        ],
    )

    logger = logging.getLogger("main")

    logger.info("-----------------------------------------------------")
    logger.info("Starting Up OrpheusMoreBetter...")

    # Work with config files
    config = configparser.ConfigParser(interpolation=None)
    try:
        # try to read the config file
        open(args.config)
        config.read(args.config)
    except:
        # if it doesn't exist, create a new one
        if not os.path.exists(os.path.dirname(args.config)):
            os.makedirs(os.path.dirname(args.config))
        # fill in the config file with default values
        config.add_section("orpheus")
        config.set("orpheus", "username", "")
        config.set("orpheus", "password", "")
        config.set("orpheus", "data_dir", "")
        config.set("orpheus", "output_dir", "")
        config.set("orpheus", "torrent_dir", "")
        config.set("orpheus", "formats", "flac, v0, 320")
        config.set("orpheus", "media", ", ".join(whatapi.lossless_media))
        config.set("orpheus", "24bit_behaviour", "0")
        config.set("orpheus", "tracker", "https://home.opsfet.ch/")
        config.set("orpheus", "mode", "both")
        config.set("orpheus", "api", "https://orpheus.network/")
        config.set("orpheus", "source", "OPS")
        config.write(open(args.config, "w"))
        logger.warning("Please edit the configuration file: {0}".format(args.config))
        sys.exit(2)
    finally:
        username: str = config.get("orpheus", "username")
        password: str = config.get("orpheus", "password")
        do_24_bit: str = config.get("orpheus", "24bit_behaviour")
        data_dir: list[str] = [
            os.path.expanduser(d) for d in config.get("orpheus", "data_dir").split(";")
        ]
        try:
            output_dir: str = os.path.expanduser(config.get("orpheus", "output_dir"))
        except configparser.NoOptionError:
            output_dir: str = data_dir[0]
        torrent_dir = os.path.expanduser(config.get("orpheus", "torrent_dir"))
        supported_formats = [
            format.strip().upper()
            for format in config.get("orpheus", "formats").split(",")
        ]

        try:
            media_config = config.get("orpheus", "media")
            if not media_config:
                supported_media = whatapi.lossless_media
            else:
                supported_media = set(
                    [medium.strip().lower() for medium in media_config.split(",")]
                )
                if not supported_media.issubset(set(whatapi.lossless_media)):
                    logger.error(
                        'Unsupported media type "{0}", edit your configuration'.format(
                            (supported_media - whatapi.lossless_media).pop()
                        )
                    )
                    logger.error(
                        "Supported types are: {0}".format(
                            ", ".join(whatapi.lossless_media)
                        )
                    )
                    sys.exit(2)
        except configparser.NoOptionError:
            supported_media = whatapi.lossless_media

        if not config.has_option("orpheus", "tracker"):
            config.set("orpheus", "tracker", "https://home.opsfet.ch/")
            config.write(open(args.config, "w"))
            logger.info("Tracker added to config file")
        if not config.has_option("orpheus", "mode"):
            config.set("orpheus", "mode", "both")
            config.write(open(args.config, "w"))
            logger.info("Candidate mode set to both")
        if not config.has_option("orpheus", "api"):
            config.set("orpheus", "api", "https://orpheus.network/")
            config.write(open(args.config, "w"))
            logger.info("API endpoint set to https://orpheus.network/")

        tracker = config.get("orpheus", "tracker")
        if not tracker.endswith('/'):
            # by popular demand...
            tracker += '/'

        mode = config.get("orpheus", "mode")

        endpoint = config.get("orpheus", "api")
        if not endpoint.endswith('/'):
            # also by popular demand.
            endpoint += '/'

        source = None
        if config.has_option("orpheus", "source"):
            source = config.get("orpheus", "source")

    upload_torrent = not args.no_upload

    logger.info("Logging in to Orpheus Network...")
    api = whatapi.WhatAPI(username, password, endpoint, args.totp)
    seen: set[str]

    try:
        with open(args.cache, "rb") as f:
            seen = pickle.load(f)
    except OSError:
        # If the cache file doesn't exist, create a new one
        print("Cache file not found, creating a new one.")
        with open(args.cache, "wb") as f:
            seen = set()
            pickle.dump(set(), f)

    if args.skip:
        parsed_urls = [
            dict(parse_qsl(urlparse(url).query)) for url in args.release_urls
        ]
        skip = [int(query["torrentid"]) for query in parsed_urls]
        for id in skip:
            logger.info("Skipping torrent {0}".format(str(id)))
            seen.add(str(id))
        pickle.dump(seen, open(args.cache, "wb"))
        return

    logger.info("Searching for transcode candidates...")
    candidates = None
    if args.release_urls:
        if len(args.release_urls) == 1 and os.path.isfile(args.release_urls[0]):
            logger.info(
                "You supplied a url list, ignoring your configuration's media types."
            )
            with open(args.release_urls[0]) as f:
                parsed_urls = [dict(parse_qsl(urlparse(url).query)) for url in f]
                candidates = [
                    (int(query["id"]), int(query["torrentid"])) for query in parsed_urls
                ]
        else:
            logger.info(
                "You supplied one or more release URLs, ignoring your configuration's media types."
            )
            parsed_urls = [
                dict(parse_qsl(urlparse(url).query)) for url in args.release_urls
            ]
            candidates = [
                (int(query["id"]), int(query["torrentid"])) for query in parsed_urls
            ]
    else:
        if args.mode is None:
            if mode == "none":
                logger.info("No urls provided and scraping is disabled")
            else:
                candidates = api.get_candidates(mode, skip=seen, media=supported_media)
        elif args.mode == "none":
            logger.info("No urls provided and scraping is disabled")
        else:
            candidates = api.get_candidates(args.mode, skip=seen, media=supported_media)

    if candidates is None:
        logger.info('No candidates found, ending program.')
        return # crashout

    for groupid, torrentid in candidates:
        tg_d = api.request_ajax("torrentgroup", id=groupid)
        # coerce to TorrentGroup - group info is stacked one deep under 'group' key
        group = TorrentGroup(**tg_d['group'], torrent=tg_d['torrents'], primary_artists=tg_d['group']['musicInfo']['artists'])
        for t in group.torrent:
            t.groupId = group.id

        torrent: Torrent = [t for t in group.torrent if t.id == torrentid][0]

        release = f"Release found: {group.name} ({group.year})"
        releaseurl = f"  Release URL: {api.release_url(group, torrent)}"

        logger.info("")
        logger.info(release)
        logger.info(releaseurl)

        flac_dir = None
        flac_file = None

        if torrent.filePath is None:
            for d in data_dir:
                flac_file = os.path.join(
                    d, html.unescape(torrent.fileList).split("{{{")[0]
                )

                if not os.path.exists(flac_file):
                    continue

                flac_dir = os.path.join(d, f"{group.name} ({group.year}) [FLAC]")

                if not os.path.exists(flac_dir):
                    os.makedirs(flac_dir)

                shutil.copy(flac_file, flac_dir)
                break

            if flac_file is not None and not os.path.exists(flac_file):
                logger.warning(f"Path not found - skipping: {flac_file}")
                continue
        else:
            for d in data_dir:
                flac_dir = os.path.join(d, html.unescape(torrent.filePath))
                if os.path.exists(flac_dir):
                    break

        if flac_dir is None:
            logger.warning(f'Flac dir unset for release {torrentid}')
            continue

        if int(do_24_bit):
            try:
                if (
                    transcode.is_24bit(flac_dir)
                    and torrent.encoding != "24bit Lossless"
                ):
                    # A lot of people are uploading FLACs from Bandcamp without realizing
                    # that they're actually 24 bit files (usually 24/44.1). Since we know for
                    # sure whether the files are 24 bit, we might as well correct the listing
                    # on the site (and get an extra upload in the process).
                    if args.no_24bit_edit:
                        logger.warning("Release is actually 24-bit lossless, skipping.")
                        continue
                    if int(do_24_bit) == 1:
                        confirmation = input("Mark release as 24bit lossless? y/n: ")
                        if confirmation != "y":
                            continue
                    logger.info("Marking release as 24bit lossless.")
                    api.set_24bit(torrent)
                    group = api.request_ajax("torrentgroup", id=groupid)
                    torrent = [t for t in group["torrents"] if t["id"] == torrentid][0]
            except Exception as e:
                logger.error(
                    "Error: can't edit 24-bit torrent - skipping: {0}".format(e)
                )
                continue

        if transcode.is_multichannel(flac_dir):
            logger.warning(
                "This is a multichannel release, which is unsupported - skipping"
            )
            continue

        needed = formats_needed(group, torrent, supported_formats)
        logger.info("  Formats needed: {0}".format(", ".join(f'{e.name} {e.encoding}' for e in needed)))

        if needed:
            # Before proceeding, do the basic tag checks on the source
            # files to ensure any uploads won't be reported, but punt
            # on the tracknumber formatting; problems with tracknumber
            # may be fixable when the tags are copied.
            broken_tags = False
            for flac_file in transcode.locate(flac_dir, transcode.ext_matcher(".flac")):
                (ok, msg) = tagging.check_tags(
                    flac_file, check_tracknumber_format=False
                )
                if not ok:
                    logger.error(
                        "A FLAC file in this release has unacceptable tags - skipping: {0}".format(
                            msg
                        )
                    )
                    logger.error("You might be able to trump it.")
                    broken_tags = True
                    break
            if broken_tags:
                continue

        for format in needed:
            if os.path.exists(flac_dir):
                logger.info("    Creating format {0}...".format(format.long_name))
                tmpdir = tempfile.mkdtemp()

                local_output_dir: str = config.get(
                    "orpheus", "output_dir_{}".format(format), fallback=output_dir
                )
                if not local_output_dir.endswith("/"):
                    local_output_dir += "/"

                local_torrent_dir: str = config.get(
                    "orpheus", "torrent_dir_{}".format(format), fallback=torrent_dir
                )
                if not local_torrent_dir.endswith("/"):
                    local_torrent_dir += "/"

                if not os.path.exists(local_torrent_dir):
                    os.mkdir(local_torrent_dir)

                try:
                    transcode_dir = transcode.transcode_release(flac_dir, local_output_dir, format, torrent, group)
                    new_torrent = transcode.make_torrent(
                        transcode_dir, tmpdir, tracker, api.passkey, source
                    )
                    logger.info("      Transcode successful, torrent created")
                    if upload_torrent:
                        logger.info("      Uploading to OPS...")
                        description = create_description(torrent, flac_dir, format)
                        api.upload(group, torrent, new_torrent, format, description)
                    shutil.copy(new_torrent, local_torrent_dir)
                    logger.info("      Success.")
                    if args.single:
                        break
                except Exception as e:
                    logger.error("      Error adding format {0}: {1}".format(format, e))
                    traceback.print_exc()
                finally:
                    shutil.rmtree(tmpdir)
            else:
                logger.warning("    Path not found - skipping: {0}".format(flac_dir))
                break
        seen.add(str(torrentid))
        pickle.dump(seen, open(args.cache, "wb"))
    logger.info("Process complete. Exiting.")


if __name__ == "__main__":
    main()
